// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as ApolloHooks from "reason-apollo-hooks/src/ApolloHooks.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as AuthorType$MyBlog from "./AuthorType.bs.js";

var ppx_printed_query = "query getAuthorByUserId($userId: ID)  {\nlistAuthors(filter: {userID: {eq: $userId}})  {\nitems  {\nid  \nfirstName  \nlastName  \nemail  \nuserID  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "listAuthors");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "items");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        tmp$1 = match$3 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$4)).map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return ;
                  } else {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match$1 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$2 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_json.decodeString(value$2);
                      tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type Author is missing");
                    }
                    var match$3 = Js_dict.get(value$1, "firstName");
                    var tmp$1;
                    if (match$3 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$3);
                      var match$4 = Js_json.decodeString(value$3);
                      tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field firstName on type Author is missing");
                    }
                    var match$5 = Js_dict.get(value$1, "lastName");
                    var tmp$2;
                    if (match$5 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$5);
                      var match$6 = Js_json.decodeString(value$4);
                      tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                    } else {
                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field lastName on type Author is missing");
                    }
                    var match$7 = Js_dict.get(value$1, "email");
                    var match$8 = Js_dict.get(value$1, "userID");
                    var tmp$3;
                    if (match$8 !== undefined) {
                      var value$5 = Caml_option.valFromOption(match$8);
                      var match$9 = Js_json.decodeString(value$5);
                      tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                    } else {
                      tmp$3 = Js_exn.raiseError("graphql_ppx: Field userID on type Author is missing");
                    }
                    return {
                            id: tmp,
                            firstName: tmp$1,
                            lastName: tmp$2,
                            email: match$7 !== undefined ? Caml_option.valFromOption(match$7) : Js_exn.raiseError("graphql_ppx: Field email on type Author is missing"),
                            userID: tmp$3
                          };
                  }
                }));
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        items: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          listAuthors: tmp
        };
}

function make(userId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "userId",
                    userId !== undefined ? userId : null
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var userId = variables.userId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "userId",
                    userId !== undefined ? userId : null
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(userId, param) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                  "userId",
                  userId !== undefined ? userId : null
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, userId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[/* tuple */[
                      "userId",
                      userId !== undefined ? userId : null
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var AuthorQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function jsonToString(obj) {
  var __x = Js_json.decodeString(obj);
  return Belt_Option.getWithDefault(__x, "");
}

function getAuthorByUserId(userId) {
  var match = ApolloHooks.useQuery(undefined, Caml_option.some(makeVariables(userId, /* () */0)), undefined, undefined, undefined, undefined, undefined, definition);
  var simple = match[0];
  if (typeof simple === "number") {
    return /* array */[];
  } else if (simple.tag) {
    return /* array */[];
  } else {
    return Belt_Option.mapWithDefault(Belt_Option.flatMap(simple[0].listAuthors, (function (listAuthors) {
                      return listAuthors.items;
                    })), /* array */[], (function (items) {
                  return Belt_Array.map(items, (function (item) {
                                return Belt_Option.mapWithDefault(item, AuthorType$MyBlog.authorStub, (function (item) {
                                              return {
                                                      id: item.id,
                                                      firstName: item.firstName,
                                                      lastName: item.lastName,
                                                      email: jsonToString(item.email),
                                                      userId: item.userID
                                                    };
                                            }));
                              }));
                }));
  }
}

export {
  AuthorQuery ,
  jsonToString ,
  getAuthorByUserId ,
  
}
/* ApolloHooks Not a pure module */
