// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Formality__Form from "re-formality/src/Formality__Form.bs.js";
import * as InputField$MyBlog from "../../layout/form/InputField.bs.js";
import * as Notification$MyBlog from "../../layout/form/Notification.bs.js";
import * as SubmitButton$MyBlog from "../../layout/form/SubmitButton.bs.js";
import * as TextAreaField$MyBlog from "../../layout/form/TextAreaField.bs.js";
import * as PostFormConfig$MyBlog from "./PostFormConfig.bs.js";
import * as Formality__PublicHelpers from "re-formality/src/Formality__PublicHelpers.bs.js";

var PostFormHook = Formality__Form.Make({
      validators: PostFormConfig$MyBlog.validators
    });

function PostForm(Props) {
  var authorId = Props.authorId;
  var initialState = {
    title: "",
    body: "",
    tags: "",
    postAuthorId: authorId
  };
  var form = Curry._2(PostFormHook.useForm, initialState, (function (state, form) {
          console.log("Submitted with:", state);
          setTimeout((function (param) {
                  Curry._1(form.notifyOnSuccess, undefined);
                  setTimeout(form.reset, 3000);
                  return /* () */0;
                }), 500);
          return /* () */0;
        }));
  var partial_arg = form.submit;
  return React.createElement("div", {
              className: "container"
            }, React.createElement("form", {
                  className: "form",
                  onSubmit: (function (param) {
                      return Formality__PublicHelpers.Dom.preventDefault(partial_arg, param);
                    })
                }, React.createElement("div", {
                      className: "container"
                    }), React.createElement(Notification$MyBlog.make, {
                      status: form.status,
                      successMessage: "Blog post has been saved",
                      errorMessage: "Server error submitting blog post"
                    }), React.createElement(InputField$MyBlog.make, {
                      inputId: "post--title",
                      value: form.state.title,
                      disabled: form.submitting,
                      onChange: (function ($$event) {
                          return Curry._2(form.change, /* Title */0, PostFormConfig$MyBlog.TitleField.update(form.state, $$event.target.value));
                        }),
                      onBlur: (function (param) {
                          return Curry._1(form.blur, /* Title */0);
                        }),
                      result: Curry._1(form.result, /* Title */0),
                      label: "Title"
                    }), React.createElement(TextAreaField$MyBlog.make, {
                      inputId: "post--body",
                      value: form.state.body,
                      disabled: form.submitting,
                      onChange: (function ($$event) {
                          return Curry._2(form.change, /* Body */1, PostFormConfig$MyBlog.BodyField.update(form.state, $$event.target.value));
                        }),
                      onBlur: (function (param) {
                          return Curry._1(form.blur, /* Body */1);
                        }),
                      result: Curry._1(form.result, /* Body */1),
                      placeholder: "Write your blog here",
                      label: "Body"
                    }), React.createElement(InputField$MyBlog.make, {
                      inputId: "post--tags",
                      value: form.state.tags,
                      disabled: form.submitting,
                      onChange: (function ($$event) {
                          return Curry._2(form.change, /* Tags */2, PostFormConfig$MyBlog.TagsField.update(form.state, $$event.target.value));
                        }),
                      onBlur: (function (param) {
                          return Curry._1(form.blur, /* Tags */2);
                        }),
                      result: Curry._1(form.result, /* Tags */2),
                      label: "Tags",
                      placeholder: "Add comma separated tags"
                    }), React.createElement(SubmitButton$MyBlog.make, {
                      status: form.status,
                      reset: form.reset
                    })));
}

var make = PostForm;

export {
  PostFormHook ,
  make ,
  
}
/* PostFormHook Not a pure module */
